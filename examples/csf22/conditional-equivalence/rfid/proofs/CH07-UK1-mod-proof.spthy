maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory CH07_UK1_mod begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, lh/1, pair/2, rh/1, rot/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~id1 ), Fr( ~k2 ), Fr( ~id2 ) ]
  --[ OnlyOnce( ) ]->
   [
   !TagRun( <~k1, ~id1>, 'learning' ),
   !ReaderRun( <~k1, ~id1>, 'learning' ),
   !TagRun( <~k2, ~id2>, 'learning' ),
   !ReaderRun( <~k2, ~id2>, 'learning' ),
   !TagRun( diff(<~k1, ~id1>, <~k2, ~id2>), 'guessing' )
   ]

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

rule (modulo E) tag1_learn:
   [ In( r1 ), Fr( ~r2 ), !TagRun( <~k, ~id>, 'learning' ) ]
  --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ), PhaseLearning( ) ]->
   [
   Out( <~r2, lh((h((~k⊕~r2⊕r1))⊕rot(~id, h((~k⊕~r2⊕r1)))))> ),
   TagState( ~k, ~id, r1, ~r2, h((~k⊕~r2⊕r1)), 'learning' )
   ]

rule (modulo E) tag1_guess:
   [ In( r1 ), Fr( ~r2 ), !TagRun( <~k, ~id>, 'guessing' ) ]
  --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ), PhaseGuessing( ) ]->
   [
   Out( <~r2, lh((h((~k⊕~r2⊕r1))⊕rot(~id, h((~k⊕~r2⊕r1)))))> ),
   TagState( ~k, ~id, r1, ~r2, h((~k⊕~r2⊕r1)), 'guessing' )
   ]

rule (modulo E) reader2_learn:
   [
   Initiated( ~r1 ), !ReaderRun( <~k, ~id>, 'learning' ),
   In( <r2, lh((h((~k⊕~r1⊕r2))⊕rot(~id, h((~k⊕~r1⊕r2)))))> )
   ]
  --[ Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ), PhaseLearning( ) ]->
   [ Out( rh((h((~k⊕~r1⊕r2))⊕rot(~id, h((~k⊕~r1⊕r2))))) ) ]

rule (modulo E) reader2_guess:
   [
   Initiated( ~r1 ), !ReaderRun( <~k, ~id>, 'guessing' ),
   In( <r2, lh((h((~k⊕~r1⊕r2))⊕rot(~id, h((~k⊕~r1⊕r2)))))> )
   ]
  --[ Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ), PhaseGuessing( ) ]->
   [ Out( rh((h((~k⊕~r1⊕r2))⊕rot(~id, h((~k⊕~r1⊕r2))))) ) ]

rule (modulo E) tag2_learn:
   [
   In( rh((hash⊕rot(~id, hash))) ),
   TagState( ~k, ~id, r1, ~r2, hash, 'learning' )
   ]
  --[ Alive( ~k, 'Reader' ), PhaseLearning( ) ]->
   [ ]

rule (modulo E) tag2_guess:
   [
   In( rh((hash⊕rot(~id, hash))) ),
   TagState( ~k, ~id, r1, ~r2, hash, 'guessing' )
   ]
  --[ Alive( ~k, 'Reader' ), PhaseGuessing( ) ]->
   [ ]

restriction unique [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction complyWithPhase [right]:
  "∀ #i1 #i2.
    ((PhaseLearning( ) @ #i1) ∧ (PhaseGuessing( ) @ #i2)) ⇒ (#i1 < #i2)"
  // safety formula

restriction complyWithPhase [left]:
  "∀ #i1 #i2.
    ((PhaseLearning( ) @ #i1) ∧ (PhaseGuessing( ) @ #i2)) ⇒ (#i1 < #i2)"
  // safety formula

lemma executable [right]:
  exists-trace "∃ x #j. Response( x, 'Tag' ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ x #j. (Response( x, 'Tag' ) @ #j)"
*/
simplify
solve( Response( x, 'Tag' ) @ #j )
  case tag1_guess
  solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #j )
    case setup
    solve( splitEqs(0) )
      case split_case_3
      SOLVED // trace found
    qed
  qed
qed

lemma executable [left]:
  exists-trace "∃ x #j. Response( x, 'Tag' ) @ #j"
/*
guarded formula characterizing all satisfying traces:
"∃ x #j. (Response( x, 'Tag' ) @ #j)"
*/
simplify
solve( Response( x, 'Tag' ) @ #j )
  case tag1_guess
  solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #j )
    case setup
    solve( splitEqs(0) )
      case split_case_3
      SOLVED // trace found
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              MIRRORED
            qed
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.1 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.3 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case reader1
      by step( contradiction /* impossible chain */ )
    next
      case reader2_guess
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case reader2_learn
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  qed
next
  case Rule_Destrd_xor
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case reader1
        by step( contradiction /* impossible chain */ )
      next
        case reader2_guess
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case reader2_learn
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case tag1_guess
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case tag1_learn
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case reader1
        by step( contradiction /* impossible chain */ )
      next
        case reader2_guess
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case reader2_learn
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case tag1_guess
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case tag1_learn
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case reader1
        by step( contradiction /* impossible chain */ )
      next
        case reader2_guess
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case reader2_learn
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case tag1_guess
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case tag1_learn
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case reader1
        by step( contradiction /* impossible chain */ )
      next
        case reader2_guess
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case reader2_learn
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case tag1_guess
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      next
        case tag1_learn
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case reader1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r1
        step( solve( !KU( ~r1 ) @ #vk ) )
          case reader1
          MIRRORED
        qed
      qed
    next
      case reader2_guess
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          by step( solve( !ReaderRun( <~k, ~id>, 'guessing' ) ▶₁ #vr ) )
        qed
      qed
    next
      case reader2_learn
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          step( solve( !ReaderRun( <~k, ~id>, 'learning' ) ▶₁ #vr ) )
            case setup_case_1
            step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(x)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( !KU( rh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
                case c_rh
                step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( rot(~id, h(x)) ) @ #vk.6 ) )
                    case c_rot
                    by step( solve( !KU( ~id ) @ #vk.8 ) )
                  qed
                next
                  case coerce
                  step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case reader2_learn
                step( solve( splitEqs(0) ) )
                  case split_case_1
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_2
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_3
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_learn
                      step( solve( !KU( ~r1 ) @ #vk.5 ) )
                        case reader1
                        step( solve( splitEqs(2) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( (~r1⊕~r2⊕~r1.1) ) @ #vk.6 ) )
                            case c_xor_case_1
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.8 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r1⊕~r2⊕~r1.1) ) ▶₀ #vk.6 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.8 ) )
                            case tag1_learn
                            step( solve( !KU( ~r1 ) @ #vk.9 ) )
                              case reader1
                              step( solve( splitEqs(2) ) )
                                case split_case_1
                                MIRRORED
                              next
                                case split_case_2
                                step( solve( !KU( (~r1⊕~r2⊕x) ) @ #vk.10 ) )
                                  case c_xor_case_1
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_2
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_3
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.12 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r1⊕~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case split_case_3
                                step( solve( !KU( ~x ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case split_case_4
                                step( solve( !KU( (x⊕~r1.1) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.10 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (r2⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( zero ) @ #vk.4 ) )
                    case c_zero
                    step( solve( splitEqs(1) ) )
                      case split
                      step( solve( !KU( (~r1⊕~r2) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( ~r2 ) @ #vk.7 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( zero ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(1) ) )
                        case split_case_1
                        step( solve( !KU( ~r2 ) @ #vk.8 ) )
                          case tag1_learn
                          step( solve( !KU( zero ) @ #vk.7 ) )
                            case c_zero
                            step( solve( splitEqs(2) ) )
                              case split
                              step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( ~r1.1 ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( zero ) ▶₀ #vk.7 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( (~r2⊕r1) ) @ #vk.8 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            step( solve( splitEqs(2) ) )
                              case split_case_1
                              step( solve( !KU( (~r2⊕r1⊕~r1.2) ) @ #vk.9 ) )
                                case c_xor_case_1
                                step( solve( !KU( (~r2⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                step( solve( !KU( (r1⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (r1⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                step( solve( !KU( ~r1.2 ) @ #vk.10 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕r1⊕~r1.2) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            next
                              case split_case_2
                              step( solve( !KU( ~r1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case split_case_3
                              step( solve( !KU( (~r1⊕x) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( (~r2⊕x) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_8
                  step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(x)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( !KU( rh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
                case c_rh
                step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( rot(~id, h(x)) ) @ #vk.6 ) )
                    case c_rot
                    by step( solve( !KU( ~id ) @ #vk.8 ) )
                  qed
                next
                  case coerce
                  step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case reader2_learn
                step( solve( splitEqs(0) ) )
                  case split_case_1
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_2
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_3
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_learn
                      step( solve( !KU( ~r1 ) @ #vk.5 ) )
                        case reader1
                        step( solve( splitEqs(2) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( (~r1⊕~r2⊕~r1.1) ) @ #vk.6 ) )
                            case c_xor_case_1
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.8 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r1⊕~r2⊕~r1.1) ) ▶₀ #vk.6 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.8 ) )
                            case tag1_learn
                            step( solve( !KU( ~r1 ) @ #vk.9 ) )
                              case reader1
                              step( solve( splitEqs(2) ) )
                                case split_case_1
                                MIRRORED
                              next
                                case split_case_2
                                step( solve( !KU( (~r1⊕~r2⊕x) ) @ #vk.10 ) )
                                  case c_xor_case_1
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_2
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_3
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.12 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r1⊕~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case split_case_3
                                step( solve( !KU( ~x ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case split_case_4
                                step( solve( !KU( (x⊕~r1.1) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.10 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (r2⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( zero ) @ #vk.4 ) )
                    case c_zero
                    step( solve( splitEqs(1) ) )
                      case split
                      step( solve( !KU( (~r1⊕~r2) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( ~r2 ) @ #vk.7 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( zero ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(1) ) )
                        case split_case_1
                        step( solve( !KU( ~r2 ) @ #vk.8 ) )
                          case tag1_learn
                          step( solve( !KU( zero ) @ #vk.7 ) )
                            case c_zero
                            step( solve( splitEqs(2) ) )
                              case split
                              step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( ~r1.1 ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( zero ) ▶₀ #vk.7 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( (~r2⊕r1) ) @ #vk.8 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            step( solve( splitEqs(2) ) )
                              case split_case_1
                              step( solve( !KU( (~r2⊕r1⊕~r1.2) ) @ #vk.9 ) )
                                case c_xor_case_1
                                step( solve( !KU( (~r2⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                step( solve( !KU( (r1⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (r1⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                step( solve( !KU( ~r1.2 ) @ #vk.10 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕r1⊕~r1.2) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            next
                              case split_case_2
                              step( solve( !KU( ~r1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case split_case_3
                              step( solve( !KU( (~r1⊕x) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( (~r2⊕x) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_8
                  step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r2
          step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
            case setup
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case lh
          step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
            case setup
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_guess
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_guess
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.2 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_guess
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r2
          step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case lh
          step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
            case setup_case_1
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_learn
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_learn
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_learn
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_learn
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case reader1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r1
        step( solve( !KU( ~r1 ) @ #vk ) )
          case reader1
          MIRRORED
        qed
      qed
    next
      case reader2_guess
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          by step( solve( !ReaderRun( <~k, ~id>, 'guessing' ) ▶₁ #vr ) )
        qed
      qed
    next
      case reader2_learn
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          step( solve( !ReaderRun( <~k, ~id>, 'learning' ) ▶₁ #vr ) )
            case setup_case_1
            step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(x)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( !KU( rh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
                case c_rh
                step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( rot(~id, h(x)) ) @ #vk.6 ) )
                    case c_rot
                    by step( solve( !KU( ~id ) @ #vk.8 ) )
                  qed
                next
                  case coerce
                  step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case reader2_learn
                step( solve( splitEqs(0) ) )
                  case split_case_1
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_2
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_3
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_learn
                      step( solve( !KU( ~r1 ) @ #vk.5 ) )
                        case reader1
                        step( solve( splitEqs(2) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( (~r1⊕~r2⊕~r1.1) ) @ #vk.6 ) )
                            case c_xor_case_1
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.8 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r1⊕~r2⊕~r1.1) ) ▶₀ #vk.6 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.8 ) )
                            case tag1_learn
                            step( solve( !KU( ~r1 ) @ #vk.9 ) )
                              case reader1
                              step( solve( splitEqs(2) ) )
                                case split_case_1
                                MIRRORED
                              next
                                case split_case_2
                                step( solve( !KU( (~r1⊕~r2⊕x) ) @ #vk.10 ) )
                                  case c_xor_case_1
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_2
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_3
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.12 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r1⊕~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case split_case_3
                                step( solve( !KU( ~x ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case split_case_4
                                step( solve( !KU( (x⊕~r1.1) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.10 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (r2⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( zero ) @ #vk.4 ) )
                    case c_zero
                    step( solve( splitEqs(1) ) )
                      case split
                      step( solve( !KU( (~r1⊕~r2) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( ~r2 ) @ #vk.7 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( zero ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(1) ) )
                        case split_case_1
                        step( solve( !KU( ~r2 ) @ #vk.8 ) )
                          case tag1_learn
                          step( solve( !KU( zero ) @ #vk.7 ) )
                            case c_zero
                            step( solve( splitEqs(2) ) )
                              case split
                              step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( ~r1.1 ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( zero ) ▶₀ #vk.7 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( (~r2⊕r1) ) @ #vk.8 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            step( solve( splitEqs(2) ) )
                              case split_case_1
                              step( solve( !KU( (~r2⊕r1⊕~r1.2) ) @ #vk.9 ) )
                                case c_xor_case_1
                                step( solve( !KU( (~r2⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                step( solve( !KU( (r1⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (r1⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                step( solve( !KU( ~r1.2 ) @ #vk.10 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕r1⊕~r1.2) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            next
                              case split_case_2
                              step( solve( !KU( ~r1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case split_case_3
                              step( solve( !KU( (~r1⊕x) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( (~r2⊕x) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_8
                  step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(x)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( !KU( rh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
                case c_rh
                step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( rot(~id, h(x)) ) @ #vk.6 ) )
                    case c_rot
                    by step( solve( !KU( ~id ) @ #vk.8 ) )
                  qed
                next
                  case coerce
                  step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case reader2_learn
                step( solve( splitEqs(0) ) )
                  case split_case_1
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case split_case_2
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_3
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_learn
                      step( solve( !KU( ~r1 ) @ #vk.5 ) )
                        case reader1
                        step( solve( splitEqs(2) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( (~r1⊕~r2⊕~r1.1) ) @ #vk.6 ) )
                            case c_xor_case_1
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_2
                            step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.7 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.8 ) )
                              case c_xor
                              step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.7 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r1⊕~r2⊕~r1.1) ) ▶₀ #vk.6 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.6, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.8 ) )
                            case tag1_learn
                            step( solve( !KU( ~r1 ) @ #vk.9 ) )
                              case reader1
                              step( solve( splitEqs(2) ) )
                                case split_case_1
                                MIRRORED
                              next
                                case split_case_2
                                step( solve( !KU( (~r1⊕~r2⊕x) ) @ #vk.10 ) )
                                  case c_xor_case_1
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_2
                                  step( solve( !KU( ~r1.1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case c_xor_case_3
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.12 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r1⊕~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case split_case_3
                                step( solve( !KU( ~x ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case split_case_4
                                step( solve( !KU( (x⊕~r1.1) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( (~r1⊕~r2) ) @ #vk.10 ) )
                                    case c_xor
                                    step( solve( !KU( ~r1.1 ) @ #vk.12 ) )
                                      case reader1
                                      MIRRORED
                                    qed
                                  next
                                    case coerce
                                    step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.10 ) )
                                      case reader1
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case reader2_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case reader2_learn
                                      by step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                    next
                                      case tag1_guess
                                      by step( contradiction /* cyclic */ )
                                    next
                                      case tag1_learn
                                      step( solve( (#vl.4, 0) ~~> (#vk.10, 0) ) )
                                        case d_0_fst
                                        by step( contradiction /* impossible chain */ )
                                      next
                                        case d_0_snd
                                        by step( solve( (#vr.9, 0) ~~> (#vk.10, 0) ) )
                                      qed
                                    qed
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.3, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case split_case_3
                    step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (r2⊕~r2.1) ) @ #vk.7 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( zero ) @ #vk.4 ) )
                    case c_zero
                    step( solve( splitEqs(1) ) )
                      case split
                      step( solve( !KU( (~r1⊕~r2) ) @ #vk.5 ) )
                        case c_xor
                        step( solve( !KU( ~r2 ) @ #vk.7 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.5 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( zero ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.3, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(1) ) )
                        case split_case_1
                        step( solve( !KU( ~r2 ) @ #vk.8 ) )
                          case tag1_learn
                          step( solve( !KU( zero ) @ #vk.7 ) )
                            case c_zero
                            step( solve( splitEqs(2) ) )
                              case split
                              step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( ~r1.1 ) @ #vk.9 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( zero ) ▶₀ #vk.7 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.9, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( (~r2⊕r1) ) @ #vk.8 ) )
                          case c_xor
                          step( solve( !KU( ~r2 ) @ #vk.9 ) )
                            case tag1_learn
                            step( solve( splitEqs(2) ) )
                              case split_case_1
                              step( solve( !KU( (~r2⊕r1⊕~r1.2) ) @ #vk.9 ) )
                                case c_xor_case_1
                                step( solve( !KU( (~r2⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_2
                                step( solve( !KU( (r1⊕~r1.2) ) @ #vk.10 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1.2 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (r1⊕~r1.2) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case c_xor_case_3
                                step( solve( !KU( ~r1.2 ) @ #vk.10 ) )
                                  case reader1
                                  MIRRORED
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r2⊕r1⊕~r1.2) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            next
                              case split_case_2
                              step( solve( !KU( ~r1 ) @ #vk.8 ) )
                                case reader1
                                MIRRORED
                              qed
                            next
                              case split_case_3
                              step( solve( !KU( (~r1⊕x) ) @ #vk.8 ) )
                                case c_xor
                                step( solve( !KU( (~r2⊕x) ) @ #vk.9 ) )
                                  case c_xor
                                  step( solve( !KU( ~r1 ) @ #vk.11 ) )
                                    case reader1
                                    MIRRORED
                                  qed
                                next
                                  case coerce
                                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.9 ) )
                                    case reader1
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case reader2_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case reader2_learn
                                    by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  next
                                    case tag1_guess
                                    by step( contradiction /* cyclic */ )
                                  next
                                    case tag1_learn
                                    step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                      case d_0_fst
                                      by step( contradiction /* impossible chain */ )
                                    next
                                      case d_0_snd
                                      by step( solve( (#vr.9, 0) ~~> (#vk.9, 0) ) )
                                    qed
                                  qed
                                qed
                              next
                                case coerce
                                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.8 ) )
                                  case reader1
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case reader2_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case reader2_learn
                                  by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                next
                                  case tag1_guess
                                  by step( contradiction /* cyclic */ )
                                next
                                  case tag1_learn
                                  step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                    case d_0_fst
                                    by step( contradiction /* impossible chain */ )
                                  next
                                    case d_0_snd
                                    by step( solve( (#vr.9, 0) ~~> (#vk.8, 0) ) )
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.6 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_8
                  step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.3, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_guess
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r2
          step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
            case setup
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case lh
          step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
            case setup
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_guess
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_guess
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.2 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( ~r2 ) @ #vk.4 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #vr ) )
          case setup
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_guess
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r2
          step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r2 ) @ #vk ) )
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case lh
          step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
            case setup_case_1
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_learn
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.5 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                step( solve( !KU( ~r2 ) @ #vk.1 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.1 ) )
                    case tag1_learn
                    step( solve( !KU( ~r2 ) @ #vk.2 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  qed
                next
                  case split_case_2
                  MIRRORED
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        step( solve( !KU( ~r2 ) @ #vk.5 ) )
                          case tag1_learn
                          by step( contradiction /* cyclic */ )
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.3 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.1 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.2 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.3 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.3 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.2 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.1 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_learn
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case c_lh
              step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.4 ) )
                case c_xor
                step( solve( !KU( rot(~id, h(z)) ) @ #vk.5 ) )
                  case c_rot
                  by step( solve( !KU( ~id ) @ #vk.7 ) )
                qed
              next
                case coerce
                step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_guess
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_learn
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  MIRRORED
                next
                  case split_case_2
                  step( solve( !KU( ~r1 ) @ #vk.3 ) )
                    case tag1_learn
                    MIRRORED
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r1⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (x⊕~r2.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.3 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.4 ) )
                      case c_xor
                      step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                        case tag1_learn
                        MIRRORED
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.4 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r2) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_reader1
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_reader2_guess
  backward-search
    case LHS
    step( simplify )
    step( solve( Initiated( ~r1 ) ▶₀ #i ) )
      case reader1
      by step( solve( !ReaderRun( <~k, ~id>, 'guessing' ) ▶₁ #i ) )
    qed
  next
    case RHS
    step( simplify )
    step( solve( Initiated( ~r1 ) ▶₀ #i ) )
      case reader1
      by step( solve( !ReaderRun( <~k, ~id>, 'guessing' ) ▶₁ #i ) )
    qed
  qed
next
  case Rule_reader2_learn
  backward-search
    case LHS
    step( simplify )
    step( solve( Initiated( ~r1 ) ▶₀ #i ) )
      case reader1
      step( solve( !ReaderRun( <~k, ~id>, 'learning' ) ▶₁ #i ) )
        case setup_case_1
        step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
          case c_lh
          step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.3 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(x)) ) @ #vk.4 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.6 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(1) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case reader1
                  MIRRORED
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.6 ) )
                      case reader1
                      MIRRORED
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r2⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.2 ) )
              case c_zero
              step( solve( splitEqs(1) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
              case c_xor
              step( solve( !KU( ~r1 ) @ #vk.5 ) )
                case reader1
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( zero ) @ #vk.5 ) )
                      case c_zero
                      MIRRORED
                    next
                      case coerce
                      step( solve( !KD( zero ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1.1) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1.1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          qed
        qed
      next
        case setup_case_2
        step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
          case c_lh
          step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.3 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(x)) ) @ #vk.4 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.6 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case tag1_learn
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(1) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case reader1
                  MIRRORED
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.6 ) )
                      case reader1
                      MIRRORED
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r2⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.2 ) )
              case c_zero
              step( solve( splitEqs(1) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
              case c_xor
              step( solve( !KU( ~r1 ) @ #vk.5 ) )
                case reader1
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( zero ) @ #vk.5 ) )
                      case c_zero
                      MIRRORED
                    next
                      case coerce
                      step( solve( !KD( zero ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1.1) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1.1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( Initiated( ~r1 ) ▶₀ #i ) )
      case reader1
      step( solve( !ReaderRun( <~k, ~id>, 'learning' ) ▶₁ #i ) )
        case setup_case_1
        step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
          case c_lh
          step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.3 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(x)) ) @ #vk.4 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.6 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case tag1_learn
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(1) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case reader1
                  MIRRORED
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.6 ) )
                      case reader1
                      MIRRORED
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r2⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.2 ) )
              case c_zero
              step( solve( splitEqs(1) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
              case c_xor
              step( solve( !KU( ~r1 ) @ #vk.5 ) )
                case reader1
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( zero ) @ #vk.5 ) )
                      case c_zero
                      MIRRORED
                    next
                      case coerce
                      step( solve( !KD( zero ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1.1) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1.1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          qed
        qed
      next
        case setup_case_2
        step( solve( !KU( lh((h(x)⊕rot(~id, h(x)))) ) @ #vk.2 ) )
          case c_lh
          step( solve( !KU( (h(x)⊕rot(~id, h(x))) ) @ #vk.3 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(x)) ) @ #vk.4 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.6 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(x)⊕rot(~id, h(x))) ) ▶₀ #vk.2 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.2 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(1) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.2 ) )
                case tag1_learn
                step( solve( !KU( ~r1 ) @ #vk.3 ) )
                  case reader1
                  MIRRORED
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r2⊕x) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.6 ) )
                      case reader1
                      MIRRORED
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r1⊕r2⊕~r2.1) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.5 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r2⊕~r2.1) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (r2⊕~r2.1) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( ~r2.1 ) @ #vk.4 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕r2⊕~r2.1) ) ▶₀ #vk.2 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.2 ) )
              case c_zero
              step( solve( splitEqs(1) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.3 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.4 ) )
                    case tag1_learn
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.3 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x) ) @ #vk.4 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.7 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
              case c_xor
              step( solve( !KU( ~r1 ) @ #vk.5 ) )
                case reader1
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( ~r2 ) @ #vk.5 ) )
                    case tag1_learn
                    step( solve( !KU( zero ) @ #vk.5 ) )
                      case c_zero
                      MIRRORED
                    next
                      case coerce
                      step( solve( !KD( zero ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      by step( contradiction /* cyclic */ )
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r2⊕r1.1) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r2 ) @ #vk.6 ) )
                      case tag1_learn
                      MIRRORED
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~r2⊕r1.1) ) ▶₀ #vk.4 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.2 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.2 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_setup
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_tag1_guess
  backward-search
    case LHS
    step( simplify )
    step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #i ) )
      case setup
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_guess
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_guess
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !TagRun( <~k, ~id>, 'guessing' ) ▶₂ #i ) )
      case setup
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_guess
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_guess
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_guess
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_tag1_learn
  backward-search
    case LHS
    step( simplify )
    step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_learn
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_learn
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !TagRun( <~k, ~id>, 'learning' ) ▶₂ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_learn
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        step( solve( !KU( ~r2 ) @ #vk ) )
          case tag1_learn
          MIRRORED
        qed
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r2) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.1 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk ) )
          case c_xor_case_1
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r2) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.1 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r2⊕x) ) @ #vk ) )
          case c_xor
          step( solve( !KU( ~r2 ) @ #vk.2 ) )
            case tag1_learn
            by step( contradiction /* cyclic */ )
          qed
        next
          case coerce
          step( solve( !KD( (~r2⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_tag2_guess
  backward-search
    case LHS
    step( simplify )
    step( solve( TagState( ~k, ~id, r1, ~r2, hash, 'guessing' ) ▶₁ #i ) )
      case tag1_guess
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_guess
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.4 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( ~r2 ) @ #vk.7 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagState( ~k, ~id, r1, ~r2, hash, 'guessing' ) ▶₁ #i ) )
      case tag1_guess
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_guess
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r2 ) @ #vk.4 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( ~r2 ) @ #vk.7 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.8 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_guess
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_tag2_learn
  backward-search
    case LHS
    step( simplify )
    step( solve( TagState( ~k, ~id, r1, ~r2, hash, 'learning' ) ▶₁ #i ) )
      case tag1_learn_case_1
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r1 ) @ #vk.3 ) )
                case reader1
                step( solve( !KU( ~r2 ) @ #vk.4 ) )
                  case tag1_learn
                  step( solve( splitEqs(3) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r1⊕~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( !KU( ~r2 ) @ #vk.8 ) )
                        case tag1_learn
                        step( solve( splitEqs(3) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_3
                          step( solve( !KU( ~x ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case split_case_4
                          step( solve( !KU( (x⊕~r2.1) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.9 ) )
                              case c_xor
                              step( solve( !KU( ~r2.1 ) @ #vk.11 ) )
                                case tag1_learn
                                by step( contradiction /* cyclic */ )
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.9 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.9, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r1⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.7 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn_case_2
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r1 ) @ #vk.3 ) )
                case reader1
                step( solve( !KU( ~r2 ) @ #vk.4 ) )
                  case tag1_learn
                  step( solve( splitEqs(3) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r1⊕~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( !KU( ~r2 ) @ #vk.8 ) )
                        case tag1_learn
                        step( solve( splitEqs(3) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_3
                          step( solve( !KU( ~x ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case split_case_4
                          step( solve( !KU( (x⊕~r2.1) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.9 ) )
                              case c_xor
                              step( solve( !KU( ~r2.1 ) @ #vk.11 ) )
                                case tag1_learn
                                by step( contradiction /* cyclic */ )
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.9 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.9, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r1⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.7 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagState( ~k, ~id, r1, ~r2, hash, 'learning' ) ▶₁ #i ) )
      case tag1_learn_case_1
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r1 ) @ #vk.3 ) )
                case reader1
                step( solve( !KU( ~r2 ) @ #vk.4 ) )
                  case tag1_learn
                  step( solve( splitEqs(3) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r1⊕~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( !KU( ~r2 ) @ #vk.8 ) )
                        case tag1_learn
                        step( solve( splitEqs(3) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_3
                          step( solve( !KU( ~x ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case split_case_4
                          step( solve( !KU( (x⊕~r2.1) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.9 ) )
                              case c_xor
                              step( solve( !KU( ~r2.1 ) @ #vk.11 ) )
                                case tag1_learn
                                by step( contradiction /* cyclic */ )
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.9 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.9, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r1⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.7 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_learn_case_2
      step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk ) )
        case c_rh
        step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.2 ) )
          case c_xor
          step( solve( !KU( rot(~id, h(z)) ) @ #vk.3 ) )
            case c_rot
            by step( solve( !KU( ~id ) @ #vk.5 ) )
          qed
        next
          case coerce
          step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.1 ) )
            case reader1
            by step( contradiction /* impossible chain */ )
          next
            case reader2_guess
            by step( contradiction /* cyclic */ )
          next
            case reader2_learn
            by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
          next
            case tag1_guess
            by step( contradiction /* cyclic */ )
          next
            case tag1_learn
            step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
            qed
          qed
        qed
      next
        case reader2_learn
        step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.4 ) )
          case c_lh
          step( solve( !KU( (h(z)⊕rot(~id, h(z))) ) @ #vk.5 ) )
            case c_xor
            step( solve( !KU( rot(~id, h(z)) ) @ #vk.6 ) )
              case c_rot
              by step( solve( !KU( ~id ) @ #vk.8 ) )
            qed
          next
            case coerce
            step( solve( !KD( (h(z)⊕rot(~id, h(z))) ) ▶₀ #vk.3 ) )
              case reader1
              by step( contradiction /* impossible chain */ )
            next
              case reader2_guess
              by step( contradiction /* cyclic */ )
            next
              case reader2_learn
              by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
            next
              case tag1_guess
              by step( contradiction /* cyclic */ )
            next
              case tag1_learn
              step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
              qed
            qed
          qed
        next
          case tag1_guess
          by step( contradiction /* cyclic */ )
        next
          case tag1_learn
          step( solve( splitEqs(1) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk.3 ) )
          next
            case split_case_2
            step( solve( !KU( ~r2 ) @ #vk.3 ) )
              case tag1_learn
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_3
            step( solve( splitEqs(2) ) )
              case split_case_1
              step( solve( !KU( ~r1 ) @ #vk.3 ) )
                case reader1
                step( solve( !KU( ~r2 ) @ #vk.4 ) )
                  case tag1_learn
                  step( solve( splitEqs(3) ) )
                    case split_case_1
                    MIRRORED
                  next
                    case split_case_2
                    step( solve( !KU( (~r1⊕~r2⊕~r2.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~r1⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.6 ) )
                        case c_xor
                        step( solve( !KU( ~r2.1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case coerce
                        step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.6 ) )
                          case reader1
                          by step( contradiction /* impossible chain */ )
                        next
                          case reader2_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case reader2_learn
                          by step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                        next
                          case tag1_guess
                          by step( contradiction /* cyclic */ )
                        next
                          case tag1_learn
                          step( solve( (#vl.4, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      step( solve( !KU( ~r2.1 ) @ #vk.6 ) )
                        case tag1_learn
                        by step( contradiction /* cyclic */ )
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r2⊕~r2.1) ) ▶₀ #vk.5 ) )
                        case reader1
                        by step( contradiction /* impossible chain */ )
                      next
                        case reader2_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case reader2_learn
                        by step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                      next
                        case tag1_guess
                        by step( contradiction /* cyclic */ )
                      next
                        case tag1_learn
                        step( solve( (#vl.4, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case split_case_2
              step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~r2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.5 ) )
                    case c_xor
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( !KU( ~r2 ) @ #vk.8 ) )
                        case tag1_learn
                        step( solve( splitEqs(3) ) )
                          case split_case_1
                          MIRRORED
                        next
                          case split_case_2
                          step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case split_case_3
                          step( solve( !KU( ~x ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case split_case_4
                          step( solve( !KU( (x⊕~r2.1) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( (~r1⊕~r2) ) @ #vk.9 ) )
                              case c_xor
                              step( solve( !KU( ~r2.1 ) @ #vk.11 ) )
                                case tag1_learn
                                by step( contradiction /* cyclic */ )
                              qed
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.9 ) )
                                case reader1
                                by step( contradiction /* impossible chain */ )
                              next
                                case reader2_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case reader2_learn
                                by step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                              next
                                case tag1_guess
                                by step( contradiction /* cyclic */ )
                              next
                                case tag1_learn
                                step( solve( (#vl.4, 0) ~~> (#vk.9, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.9, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case coerce
                            step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.5 ) )
                      case reader1
                      by step( contradiction /* impossible chain */ )
                    next
                      case reader2_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case reader2_learn
                      by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                    next
                      case tag1_guess
                      by step( contradiction /* cyclic */ )
                    next
                      case tag1_learn
                      step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case split_case_3
              step( solve( !KU( (~r2⊕r1⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~r2⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                step( solve( !KU( (r1⊕~r1.1) ) @ #vk.6 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.7 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~r2⊕r1) ) @ #vk.7 ) )
                  case c_xor
                  step( solve( !KU( ~r1.1 ) @ #vk.7 ) )
                    case reader1
                    step( solve( !KU( ~r2 ) @ #vk.8 ) )
                      case tag1_learn
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕r1⊕~r2.1) ) @ #vk.8 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          step( solve( !KU( (r1⊕~r2.1) ) @ #vk.9 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.10 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (r1⊕~r2.1) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_3
                          step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                            case tag1_learn
                            by step( contradiction /* cyclic */ )
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕r1⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_3
                        step( solve( !KU( ~r1 ) @ #vk.7 ) )
                          case tag1_learn
                          MIRRORED
                        qed
                      next
                        case split_case_4
                        step( solve( !KU( (x⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( (~r2⊕x) ) @ #vk.8 ) )
                            case c_xor
                            step( solve( !KU( ~r2.1 ) @ #vk.9 ) )
                              case tag1_learn
                              by step( contradiction /* cyclic */ )
                            qed
                          next
                            case coerce
                            step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.8 ) )
                              case reader1
                              by step( contradiction /* impossible chain */ )
                            next
                              case reader2_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case reader2_learn
                              by step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                            next
                              case tag1_guess
                              by step( contradiction /* cyclic */ )
                            next
                              case tag1_learn
                              step( solve( (#vl.4, 0) ~~> (#vk.8, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r2⊕r1) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~r2⊕r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk.3 ) )
              case c_zero
              step( solve( splitEqs(2) ) )
                case split
                step( solve( !KU( (~r1⊕~r2) ) @ #vk.4 ) )
                  case c_xor
                  step( solve( !KU( ~r2 ) @ #vk.6 ) )
                    case tag1_learn
                    step( solve( !KU( ~r1 ) @ #vk.7 ) )
                      case reader1
                      step( solve( splitEqs(3) ) )
                        case split_case_1
                        MIRRORED
                      next
                        case split_case_2
                        step( solve( !KU( (~r2⊕~r2.1) ) @ #vk.7 ) )
                          case c_xor
                          step( solve( !KU( ~r2.1 ) @ #vk.8 ) )
                            case tag1_learn
                            MIRRORED
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~r2⊕~r2.1) ) ▶₀ #vk.7 ) )
                            case reader1
                            by step( contradiction /* impossible chain */ )
                          next
                            case reader2_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case reader2_learn
                            by step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                          next
                            case tag1_guess
                            by step( contradiction /* cyclic */ )
                          next
                            case tag1_learn
                            step( solve( (#vl.4, 0) ~~> (#vk.7, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~r1⊕~r2) ) ▶₀ #vk.4 ) )
                    case reader1
                    by step( contradiction /* impossible chain */ )
                  next
                    case reader2_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case reader2_learn
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case tag1_guess
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_learn
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r2) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.6 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r2⊕z) ) @ #vk.3 ) )
              case c_xor_case_1
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r2) ) @ #vk.7 ) )
                case c_xor
                step( solve( !KU( ~r2 ) @ #vk.8 ) )
                  case tag1_learn
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r2) ) ▶₀ #vk.4 ) )
                  case reader1
                  by step( contradiction /* impossible chain */ )
                next
                  case reader2_guess
                  by step( contradiction /* cyclic */ )
                next
                  case reader2_learn
                  by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                next
                  case tag1_guess
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_learn
                  step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r2⊕z) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r2⊕x) ) @ #vk.3 ) )
              case c_xor
              step( solve( !KU( ~r2 ) @ #vk.7 ) )
                case tag1_learn
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~r2⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.7 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                case reader1
                by step( contradiction /* impossible chain */ )
              next
                case reader2_guess
                by step( contradiction /* cyclic */ )
              next
                case reader2_learn
                by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
              next
                case tag1_guess
                by step( contradiction /* cyclic */ )
              next
                case tag1_learn
                step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end

==============================================================================
summary of summaries:

analyzed: CH07-UK1-mod.spthy

  RHS :  executable (exists-trace): verified (5 steps)
  LHS :  executable (exists-trace): verified (5 steps)
  DiffLemma:  Observational_equivalence : verified (9233 steps)

==============================================================================

real 1134.78
user 2968.05
sys 2347.60

